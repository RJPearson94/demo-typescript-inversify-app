version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.13

references:
  root_directory: &root_directory ~/typescript-inversify-demo
  shared_directory: &shared_directory ~/typescript-inversify-demo/shared
  lambda_directory: &lambda_directory ~/typescript-inversify-demo/lambda
  web_app_directory: &web_app_directory ~/typescript-inversify-demo/web-app

  repo_cache: &repo_cache v1-repo-{{ .Environment.CIRCLE_SHA1 }}
  nodejs_cache: &nodejs_cache dependency-cache-{{ checksum "package.json" }}
  golang_cache: &golang_cache go-mod-{{ checksum "go.sum" }}

  lambda: &lambda 'lambda'
  web_app: &web_app 'web-app'

executors:
  nodejs:
    docker:
      - image: circleci/node:latest
  golang:
    docker:
      - image: circleci/golang:latest
  golang-node:
    docker:
      - image: circleci/golang:latest-node

commands:
  install-yarn:
    steps:
      - run:
          name: Install Yarn
          command: curl -o- -L https://yarnpkg.com/install.sh | bash
  install-dependencies:
    steps:
      - run:
          name: Install dependencies
          command: yarn install
  nodejs_cache_restore:
    steps:
      - restore_cache:
          key: *repo_cache
      - restore_cache:
          key: *nodejs_cache
  nodejs_install:
    steps:
      - nodejs_cache_restore
      - install-dependencies
      - save_cache:
          key: *nodejs_cache
          paths:
            - node_modules
  nodejs_test:
    steps:
      - nodejs_cache_restore
      - run:
          name: Run Unit Tests
          command: yarn test
  nodejs_build:
    parameters:
      artefact-cache:
        type: string
    steps:
      - nodejs_cache_restore
      - run:
          name: create artefact
          command: yarn build
      - save_cache:
          key: v1-repo-<<parameters.artefact-cache>>-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - dist
  golang_terratests:
    parameters:
      artefact-cache:
        type: string
      test-directory:
        type: string
    steps:
      - restore_cache:
          key: *repo_cache
      - restore_cache:
          key: v1-repo-<<parameters.artefact-cache>>-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: *golang_cache
      - run:
          name: Install Terraform
          command: wget https://releases.hashicorp.com/terraform/0.12.3/terraform_0.12.3_linux_amd64.zip	&& unzip terraform_0.12.3_linux_amd64.zip && sudo mv terraform /usr/local/bin/	&& chmod +x /usr/local/bin/terraform
      - run:
          name: Install Terragrunt
          command: wget https://github.com/gruntwork-io/terragrunt/releases/download/v0.19.6/terragrunt_linux_amd64	&& sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt && chmod +x /usr/local/bin/terragrunt
      - run:
          name: Run Terratests
          command: cd <<parameters.test-directory>> && go test
      - save_cache:
          key: *golang_cache
          paths:
            - ~/go/pkg/mod
  lambda_terratests:
    steps:
      - golang_terratests:
          artefact-cache: *lambda
          test-directory: '.'
jobs:
  setup:
    working_directory: *root_directory
    executor: nodejs
    steps:
      - checkout
      - install-yarn
      - save_cache:
          key: *repo_cache
          paths:
            - *root_directory

  install:
    working_directory: *root_directory
    executor: nodejs
    steps:
      - nodejs_install
  shared-install:
    working_directory: *shared_directory
    executor: nodejs
    steps:
      - nodejs_install
  web-app-install:
    working_directory: *web_app_directory
    executor: nodejs
    steps:
      - nodejs_install
  lambda-install:
    working_directory: *lambda_directory
    executor: nodejs
    steps:
      - nodejs_install

  lint:
    working_directory: *root_directory
    executor: nodejs
    steps:
      - nodejs_cache_restore
      - restore_cache:
          key: dependency-cache-{{ checksum "shared/package.json" }}
      - restore_cache:
          key: dependency-cache-{{ checksum "lambda/package.json" }}
      - restore_cache:
          key: dependency-cache-{{ checksum "web-app/package.json" }}
      - run:
          name: Lint all
          command: yarn lint:all

  shared-test:
    working_directory: *shared_directory
    executor: nodejs
    steps:
      - nodejs_test
  web-app-test:
    working_directory: *web_app_directory
    executor: nodejs
    steps:
      - nodejs_test
  lambda-test:
    working_directory: *lambda_directory
    executor: nodejs
    steps:
      - nodejs_test

  web-app-create-artefact:
    working_directory: *web_app_directory
    executor: nodejs
    steps:
      - nodejs_build:
          artefact-cache: *web_app
  lambda-create-artefact:
    working_directory: *lambda_directory
    executor: nodejs
    steps:
      - nodejs_build:
          artefact-cache: *lambda

  lambda-terratest-api-gateway-module:
    working_directory: ~/typescript-inversify-demo/lambda/modules/api-gateway/test
    executor: golang
    steps:
      - lambda_terratests

  lambda-terratest-lambda-module:
    working_directory: ~/typescript-inversify-demo/lambda/modules/lambda/test
    executor: golang
    steps:
      - lambda_terratests

  lambda-terratest-module:
    working_directory: ~/typescript-inversify-demo/lambda/terratest
    executor: golang
    steps:
      - lambda_terratests

  lambda-e2e:
    working_directory: ~/typescript-inversify-demo/lambda
    executor: golang-node
    steps:
      - install-yarn
      - restore_cache:
          key: *nodejs_cache
      - install-dependencies
      - golang_terratests:
          artefact-cache: *lambda
          test-directory: 'e2e'

  release:
    working_directory: *root_directory
    executor: nodejs
    steps:
      - nodejs_cache_restore
      - run:
          name: Run Semantic Release
          command: yarn semantic-release

workflows:
  version: 2
  shared:
    jobs:
      # Setup
      - setup

      # Install
      - install:
          requires:
            - setup
      - shared-install:
          requires:
            - setup
      - web-app-install:
          requires:
            - shared-install
            - setup
      - lambda-install:
          requires:
            - shared-install
            - setup

      # Lint
      - lint:
          requires:
            - install
            - shared-install
            - web-app-install
            - lambda-install

      # Test
      - shared-test:
          requires:
            - lint
      - web-app-test:
          requires:
            - shared-test
            - lint
      - lambda-test:
          requires:
            - shared-test
            - lint

      # Create Artefacts
      - web-app-create-artefact:
          requires:
            - web-app-test
      - lambda-create-artefact:
          requires:
            - lambda-test

      # Terratest Modules
      - lambda-terratest-api-gateway-module:
          requires:
            - lambda-create-artefact
      - lambda-terratest-lambda-module:
          requires:
            - lambda-create-artefact

      # Terratest
      - lambda-terratest-module:
          requires:
            - lambda-terratest-api-gateway-module
            - lambda-terratest-lambda-module

      # E2E
      - lambda-e2e:
          requires:
            - lambda-terratest-module

      # Release
      - release:
          requires:
            - web-app-create-artefact
            - lambda-e2e
          filters:
            branches:
              only: master
